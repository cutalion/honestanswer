# --------------------------------------------------
# Convenience Methods
# --------------------------------------------------
def all_spec_files
  Dir['spec/**/*_spec.rb']
end

def controllers_specs_files
  Dir['spec/controllers/**/*_spec.rb']
end

def run(cmd)
  puts(cmd)
  system(cmd)
end

def spec(args)
  run "ruby -rrubygems -S rspec --tty #{args}"
end

def run_all_specs
  spec all_spec_files.join(' ')
end

def run_all_controllers_specs
  spec controllers_specs_files.join(' ')
end

def run_controllers_specs(match)
  return if match =~ /^shared/

  if mailer? match
    run_mailer_spec match
    return
  end

  if match !~ /^layouts/
    spec("spec/controllers/%s_controller_spec.rb"   % match )
  else
    run_all_controllers_specs
  end
end

def run_mailer_spec(match)
  mailer = match.split('/').first
  spec("spec/mailers/%s_spec.rb" % mailer)
end

def run_all_features
  run("bundle exec cucumber")
end

def feature(feature)
  run("bundle exec cucumber #{feature}")
end

def run_suite
  run_all_specs
  run_all_features
end


def mailer?(match)
  mailer = match.split('/').first
  File.exists?(File.join('app', 'mailers', "#{mailer}.rb" ))
end

# --------------------------------------------------
# Watchr Rules
# --------------------------------------------------
watch('app/(controllers/.*).rb')  { |m| spec("spec/%s_spec.rb"                          % m[1] ) }
watch('app/views/(.*).*'       )  { |m| run_controllers_specs m[1]                               }
watch('app/(models/.*).rb'     )  { |m| spec("spec/%s_spec.rb"                          % m[1] ) }
watch('app/(helpers/.*).rb'    )  { |m| spec("spec/%s_spec.rb"                          % m[1] ) }
watch('^spec.*/.*_spec\.rb'    )  { |m| spec("%s"                                       % m[0] ) }
watch('^lib/(.*)\.rb'          )  { |m| spec("spec/libs/%s_spec.rb"                     % m[1] ) }
watch('^lib/.*/(.*)\.rb'       )  { |m| spec("spec/libs/%s_spec.rb"                     % m[1] ) }
watch('^spec/spec_helper\.rb'  )  { run_all_specs                                                }
watch('^(features/.*\.feature)')  { |m| feature m[1]                                             }

# --------------------------------------------------
# Signal Handling
# --------------------------------------------------
# Ctrl-\
Signal.trap('QUIT') do
  puts " --- Running all specs ---\n\n"
  run_all_specs
end

# Ctrl-C
Signal.trap 'INT' do
  if @interrupted then
    @wants_to_quit = true
    abort("\\n")
  else
    puts "Interrupt a second time to quit"
    @interrupted = true
    Kernel.sleep 1.5
    # raise Interrupt, nil # let the run loop catch it
    run_suite
  end
end
